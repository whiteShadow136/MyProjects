CREATE OR REPLACE FUNCTION generate_padded_number(n INTEGER)
    RETURNS VARCHAR(8) AS $$
BEGIN
    RETURN LPAD(n::TEXT, 20, '0');
END;
$$ LANGUAGE plpgsql;


select generate_padded_number(1 + (random() * 500)::integer);


-- 插入数据的 PL/pgSQL 脚本
DO $$
    DECLARE
        batch_size INTEGER := 100000;    -- 每批次插入行数
        total_rows INTEGER := 27109488; -- 总行数，接近 20 GB
        i INTEGER;
    BEGIN
        FOR i IN 1..total_rows/batch_size LOOP
                INSERT INTO large_data_table1 (creator, modifier, listener)
                SELECT
                    generate_padded_number(1 + (random() * 500)::integer),  -- 使用随机字符串填充
                    generate_padded_number(1 + (random() * 500)::integer),
                    generate_padded_number(1 + (random() * 500)::integer)
                FROM generate_series(1, batch_size);

                -- 每批次插入后可选的 COMMIT 以释放事务锁
                COMMIT;
            END LOOP;
    END $$;

select * from large_data_table1 limit 100;

我想要创建一个表，有两个字段，source和target，都是字符串类型，需要五百行数据，source字段由00000000000000000001到00000000000000000500，target字段由66666666666666666001到66666666666666666500，帮我写个脚本录入数据



DO $$
DECLARE
    batch_size INTEGER := 1000000;  -- 每批处理的数据量
    updated_count INTEGER;          -- 每次批量更新后受影响的行数
BEGIN
    LOOP
        -- 使用CTE查询并更新符合条件的一百万条数据
        WITH batch AS (
            SELECT _id, creator
            FROM large_data_table
            WHERE creator ~ '^[0-9]'  -- 确保creator字段以数字开头
            LIMIT batch_size
            FOR UPDATE SKIP LOCKED
        )
        UPDATE large_data_table
        SET creator =
            CASE
                WHEN creator LIKE '0%' THEN '0'
                WHEN creator LIKE '1%' THEN '1'
                WHEN creator LIKE '2%' THEN '2'
                WHEN creator LIKE '3%' THEN '3'
                WHEN creator LIKE '4%' THEN '4'
                WHEN creator LIKE '5%' THEN '5'
                WHEN creator LIKE '6%' THEN '6'
                WHEN creator LIKE '7%' THEN '7'
                WHEN creator LIKE '8%' THEN '8'
                WHEN creator LIKE '9%' THEN '9'
                ELSE creator  -- 其他情况保持原值
            END
        WHERE _id IN (SELECT _id FROM batch);

        -- 获取受影响的行数
        GET DIAGNOSTICS updated_count = ROW_COUNT;

        -- 当更新的数据少于 batch_size，说明已经处理完所有数据，可以退出
        IF updated_count < batch_size THEN
            EXIT;
        END IF;

        -- 提交当前批次更新
        COMMIT;
    END LOOP;
END $$;


-- 创建更新辅助函数
CREATE OR REPLACE FUNCTION batch_update_creator()
RETURNS void AS $$
DECLARE
    batch_size INTEGER := 1000000;  -- 每批处理100万条数据
    total_rows INTEGER;
    processed_rows INTEGER := 0;
    current_max_id INTEGER := 0;
BEGIN
    -- 获取总行数
    SELECT COUNT(*) INTO total_rows FROM test_table;
    RAISE NOTICE 'Starting batch update, total rows: %', total_rows;

    WHILE TRUE LOOP
        -- 开始一个新的事务
        BEGIN
            -- 使用临时表存储当前批次要处理的ID
            CREATE TEMP TABLE current_batch AS
            SELECT _id, creator
            FROM test_table
            WHERE _id > current_max_id
            ORDER BY _id
            LIMIT batch_size;

            -- 如果没有获取到数据，说明处理完成
            IF NOT FOUND THEN
                DROP TABLE IF EXISTS current_batch;
                EXIT;
            END IF;

            -- 记录本批次的最大ID
            SELECT MAX(_id) INTO current_max_id FROM current_batch;

            -- 更新当前批次的数据
            -- 将creator中的00...x替换为66...x
            UPDATE test_table t
            SET creator =
                CASE
                    WHEN t.creator ~ '^0+[0-9]+$' THEN  -- 检查是否匹配00...x格式
                        '66' || RIGHT(t.creator, 6)     -- 保留后6位数字，前面加66
                    ELSE t.creator
                END
            WHERE _id IN (SELECT _id FROM current_batch);

            -- 获取本次更新的行数
            GET DIAGNOSTICS processed_rows = ROW_COUNT;

            -- 清理临时表
            DROP TABLE current_batch;

            -- 提交事务
            COMMIT;

            -- 打印进度
            RAISE NOTICE 'Processed batch: % rows updated. Current _id: %',
                processed_rows, current_max_id;
        EXCEPTION WHEN OTHERS THEN
            -- 如果发生错误，回滚事务
            ROLLBACK;
            RAISE NOTICE 'Error occurred during batch update: %', SQLERRM;
        END;
    END LOOP;

    RAISE NOTICE 'Update completed. Last processed _id: %', current_max_id;
END;
$$ LANGUAGE plpgsql;

-- 执行批量更新
SELECT batch_update_creator();

-- 完成后删除函数（可选）
DROP FUNCTION batch_update_creator();